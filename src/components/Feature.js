import React, { Component } from "react";
import ArticleList from "./ArticleList";
import AddArticle from "./AddArticle";

// the id constant is a generator. It is created by defining an inline generator function and calling it right away. This generator will yield numbers infinitely.So calling id.next() the first time returns 1, next is 2 and so on. This simple utility will come in handy when it's time to add new articles and we need a new unique ID.
const gen = (function* () {
  let i = 1;

  while (true) {
    yield i;
    i += 1;
  }
})();

export default class Feature extends Component {
  //the state consists of an array of articles, a title string and a summary string. Each article object in the articles array has several string fields to help render the article and an id field which is a number. The number is generated by id.next()
  state = {
    articles: [
      {
        id: gen.next(),
        title: "Article 1",
        summary: "Article 1 Summary",
        display: "none",
      },
      {
        id: gen.next(),
        title: "Article 2",
        summary: "Article 2 Summary",
        display: "none",
      },
      {
        id: gen.next(),
        title: "Article 3",
        summary: "Article 3 Summary",
        display: "none",
      },
      {
        id: gen.next(),
        title: "Article 4",
        summary: "Article 4 Summary",
        display: "none",
      },
    ],
    title: "",
    summary: "",
  };

  // The onChangeTitle() and the onChangeSummary() methods use setState() to update title and summary state values respectively.The new values come from the target.value property of the event argument which is the value that the user types into the text input

  onChangeTitle = (e) => {
    this.setState({ title: e.target.value });
  };

  onChangeSummary = (e) => {
    this.setState({ summary: e.target.value });
  };

  // the onClickAdd() method adds a new article to the articles state. This state value is an array. We use the spread operator to build a new array from the existing array and the new object gets added to the end of the new array.
  // The reason we are building a new array and passing it to setState is so that there are no suprises.We're treating state values as immutable so that other code that updates the same state doesn't accidentally cause problems.
  onClickAdd = () => {
    this.setState((state) => ({
      articles: [
        ...state.articles,
        {
          id: gen.next(),
          title: state.title,
          summary: state.summary,
          display: "none",
        },
      ],
      title: "",
      summary: "",
    }));
  };

  // the onClickRemove() method removes the article with the given ID from the articles state. It does this by calling filter() on the array, which returns a new array so the operation is immutable. The filter removes the object with the given ID.
  onClickRemove = (id) => {
    this.setState((state) => ({
      ...state,
      articles: state.articles.filter((article) => article.id !== id),
    }));
  };

  // the onClickToggle() method toggles the visibility of the article with the given ID. We carry out two immutable operations in this method.
  //first we build a new articles array from state.articles. Then, based on the index of the given ID we replace the article object at the index with a new object. We use the object spread operator to
  // fill in the properties ({ ...articles[index]}) and then the display property value is toggled based on the existing display value.

  onClickToggle = (id) => {
    this.setState((state) => {
      const articles = [...state.articles];
      const index = articles.findIndex((article) => article.id === id);

      articles[index] = {
        ...articles[index],
        display: articles[index].display ? "" : "none",
      };

      return { ...state, articles };
    });
  };

  render() {
    const { articles, title, summary } = this.state;

    console.log("Here are the articles", articles);

    return (
      <section>
        <AddArticle
          name="Articles"
          title={title}
          summary={summary}
          onChangeTitle={this.onChangeTitle}
          onChangeSummary={this.onChangeSummary}
          onClickAdd={this.onClickAdd}
        />
        <ArticleList
          articles={articles}
          onClickToggle={this.onClickToggle}
          onClickRemove={this.onClickRemove}
        />
      </section>
    );
  }
}
